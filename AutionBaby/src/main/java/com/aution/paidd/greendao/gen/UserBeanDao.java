package com.aution.paidd.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.aution.paidd.bean.UserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BEAN".
*/
public class UserBeanDao extends AbstractDao<UserBean, Long> {

    public static final String TABLENAME = "USER_BEAN";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, String.class, "uid", false, "UID");
        public final static Property Imei = new Property(2, String.class, "imei", false, "IMEI");
        public final static Property Sex = new Property(3, int.class, "sex", false, "SEX");
        public final static Property Buymoney = new Property(4, int.class, "buymoney", false, "BUYMONEY");
        public final static Property Nickname = new Property(5, String.class, "nickname", false, "NICKNAME");
        public final static Property At = new Property(6, int.class, "at", false, "AT");
        public final static Property Img = new Property(7, String.class, "img", false, "IMG");
        public final static Property Givemoney = new Property(8, int.class, "givemoney", false, "GIVEMONEY");
        public final static Property Patmoney = new Property(9, int.class, "patmoney", false, "PATMONEY");
        public final static Property Experience = new Property(10, int.class, "experience", false, "EXPERIENCE");
        public final static Property Pwd = new Property(11, String.class, "pwd", false, "PWD");
        public final static Property Account = new Property(12, String.class, "account", false, "ACCOUNT");
        public final static Property Openid = new Property(13, String.class, "openid", false, "OPENID");
        public final static Property Flag = new Property(14, int.class, "flag", false, "FLAG");
    }


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"UID\" TEXT," + // 1: uid
                "\"IMEI\" TEXT," + // 2: imei
                "\"SEX\" INTEGER NOT NULL ," + // 3: sex
                "\"BUYMONEY\" INTEGER NOT NULL ," + // 4: buymoney
                "\"NICKNAME\" TEXT," + // 5: nickname
                "\"AT\" INTEGER NOT NULL ," + // 6: at
                "\"IMG\" TEXT," + // 7: img
                "\"GIVEMONEY\" INTEGER NOT NULL ," + // 8: givemoney
                "\"PATMONEY\" INTEGER NOT NULL ," + // 9: patmoney
                "\"EXPERIENCE\" INTEGER NOT NULL ," + // 10: experience
                "\"PWD\" TEXT," + // 11: pwd
                "\"ACCOUNT\" TEXT," + // 12: account
                "\"OPENID\" TEXT," + // 13: openid
                "\"FLAG\" INTEGER NOT NULL );"); // 14: flag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(2, uid);
        }
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(3, imei);
        }
        stmt.bindLong(4, entity.getSex());
        stmt.bindLong(5, entity.getBuymoney());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(6, nickname);
        }
        stmt.bindLong(7, entity.getAt());
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(8, img);
        }
        stmt.bindLong(9, entity.getGivemoney());
        stmt.bindLong(10, entity.getPatmoney());
        stmt.bindLong(11, entity.getExperience());
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(12, pwd);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(13, account);
        }
 
        String openid = entity.getOpenid();
        if (openid != null) {
            stmt.bindString(14, openid);
        }
        stmt.bindLong(15, entity.getFlag());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(2, uid);
        }
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(3, imei);
        }
        stmt.bindLong(4, entity.getSex());
        stmt.bindLong(5, entity.getBuymoney());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(6, nickname);
        }
        stmt.bindLong(7, entity.getAt());
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(8, img);
        }
        stmt.bindLong(9, entity.getGivemoney());
        stmt.bindLong(10, entity.getPatmoney());
        stmt.bindLong(11, entity.getExperience());
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(12, pwd);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(13, account);
        }
 
        String openid = entity.getOpenid();
        if (openid != null) {
            stmt.bindString(14, openid);
        }
        stmt.bindLong(15, entity.getFlag());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imei
            cursor.getInt(offset + 3), // sex
            cursor.getInt(offset + 4), // buymoney
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nickname
            cursor.getInt(offset + 6), // at
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // img
            cursor.getInt(offset + 8), // givemoney
            cursor.getInt(offset + 9), // patmoney
            cursor.getInt(offset + 10), // experience
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // pwd
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // account
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // openid
            cursor.getInt(offset + 14) // flag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImei(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.getInt(offset + 3));
        entity.setBuymoney(cursor.getInt(offset + 4));
        entity.setNickname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAt(cursor.getInt(offset + 6));
        entity.setImg(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGivemoney(cursor.getInt(offset + 8));
        entity.setPatmoney(cursor.getInt(offset + 9));
        entity.setExperience(cursor.getInt(offset + 10));
        entity.setPwd(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAccount(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setOpenid(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFlag(cursor.getInt(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
